name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      custom_version:
        description: 'Custom version (optional, overrides release_type)'
        required: false
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - run: npm ci
      - run: npm run build
      - run: npm test
      - run: npm run lint
      
      - name: Update version
        run: |
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            # Custom version specified
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            TARGET_VERSION="${{ github.event.inputs.custom_version }}"
            
            if [ "$CURRENT_VERSION" = "$TARGET_VERSION" ]; then
              echo "Version $TARGET_VERSION is already set, skipping version update"
            else
              npm version $TARGET_VERSION --no-git-tag-version
              git add package.json package-lock.json
              git commit -m "Release version $TARGET_VERSION"
            fi
            
            # Create tag and push
            git tag -a "v$TARGET_VERSION" -m "Release $TARGET_VERSION" || true
            git push origin main --tags
            echo "RELEASE_VERSION=$TARGET_VERSION" >> $GITHUB_ENV
          else
            # Use release type
            NEW_VERSION=$(npm version ${{ github.event.inputs.release_type }} --no-git-tag-version)
            git add package.json package-lock.json
            git commit -m "Release version $NEW_VERSION"
            git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
            git push origin main --tags
            echo "RELEASE_VERSION=${NEW_VERSION#v}" >> $GITHUB_ENV
          fi
      
      - run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
